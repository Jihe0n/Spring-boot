1.DTO
form 태그 안쪽에 태그에 name이랑 
객체를 받기위해 만든 DTO 클래스의 필드명을 같게 만들어야 
form 태그에서 보낸 값을 DTO를 통해서 컨트롤러에서 잘 받을 수 있다. 

2. 폼데이터 주고받기
form 태그의 action, method 를 통해서
컨트롤러에서 post매핑으로 action 으로 준 주소값을 통해 주고받는다
근데 던져준 form 데이터는 객체로 받기위해서 DTO 클래스를 생성하고
DTO클래스를 타입으로 같는 변수를 선언하여 컨트롤러에서 받을 수 있다.

3. JPA
서버는 자바로 되어있지만 DB는 자바를 모르기때문에
JPA가 필요한데 이놈이 자바언어를 DB가 이해할 수 있게 해주고
데이터 관리에 필요한 여러 기능들을 제공함
JPA의 핵심은 Entity와 Repository가 있음
Entity는 자바객체를 DB가 이해할 수 있게 규격화한 데이터
이러한 Entity는  Repository라는 일꾼에 의해 전달되고 처리됨

4. DB에 저장
흐름 : 데이터가 사용자에 의해서 오면 DTO로 컨트롤러에게 전달되고
DTO를 Entity로 변환하고 Repository를 통해서 DB까지 저장됨
따라서  1) DTO를 Entity로 변환
2) Repository에게 Entity를 DB안에 저장하게 시킴

5. yml, yaml
xml, json 과 같은 데이터 포맷
주석을 넣을 수 있으며 읽기 편하다

기본 문법
main syntax
	HashMap(Key - Value) 을 기본 구조로한다.
	Value 타입은 Array, String, Number, Boolean 등이 가능하다.
	json처럼 계층 구조를 가질 수 있다.
	json과 달리 "" (double quotation marks) 없이 문자열 작성 가능.
special syntax
	계층 단계 이동시, 다음 줄에서 Tab 대신에 space bar 2칸으로 들여쓰기해야한다.
	- (하이픈) 으로 배열의 원소를 나타낸다.
	하이픈 다음엔 반드시 space bar 1칸이 필요하다.


5. 롬복
코드의 재사용을 최소화 하는 리팩토링 기법


6. 스프링은 어노테이션 기반이다


7. 통상적으로
get방식 > 데이터 조회
post방식 > 데이터 생성
put방식 > 데이터 수정
delete방식 > 데이터 삭제


8. mybatis
자바의 메서드와 sql을 매핑해주는 프레임워크

9. API란 
소프트웨어가 다른 소프트웨어로 부터 
정해진 형식으로 요청하고 응답 받을 수 있는 수단을 api라고 부름 

10. REST API란 
웹서버는 브라우저랑 만 통신하지않고 모든 클라이언트에서 통신할 수 있기에
rest api란 모든 클라이언트에서 대응할 수 있게 json 형태로 데이터를 주고받는 설계

11 프레임워크 vs 라이브러리
딱히 구분지을 이유는 없기한데
프레임워크는 내가 따르는것 ex) Django 
라이브러리는 필요할때 내가 가져다 쓰는 것 ex) Jquery

12. @RestController
일반 컨트롤러 어노테이션은 뷰페이지 템플릿을 반환하지만 
Rest 컨트롤러 어노테이션은 JSON형태로 데이터를 반환한다

13. 카멜방식 vs 팟홀방식
카멜은 myFirstVariable
팟홀은 my_first_variable

14. @PathVariable
url 요청으로 값을 받아올때는 
파라미터에 @PathVariable를 적어줘야됨 
@GetMapping("articles/new/{id}")
public String newArticleForm(@PathVariable Long id) // 이런식으로

15. @RequestBody
REST API에서 JSON으로 데이터를 보낼때는 
파라미터에 @RequestBody를 적어줘야됨 
// 확실한건 아닌데 아마 POST에서만

16. 상태코드 반환 ResponseEntity




질문 1. 
jpa라는 걸 봤다 엔티티, 리파지토리로 데이터베이스 매핑 하는 걸 봤는데
mybatis라는 프레임워크가 같은 역활은 하는건지?

일반적으로 웹 개발은
프론트 엔드(보이는쪽-클라이언트) 개발과 
백 엔드(안보이는쪽-서버) 개발로 나뉘는데,

백엔드 개발은 REST API로
프론트 엔드 개발은
각 클라이언트의 언어(또는 프레임워크)로 개발됩니다.

백엔드 개발자는 REST API만 개발
프론트 개발자는 화면 개발만 하여
분업화 하는거죠.
 



